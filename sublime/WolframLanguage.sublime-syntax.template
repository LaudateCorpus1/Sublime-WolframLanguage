%YAML 1.2
---

# https://www.sublimetext.com/docs/3/syntax.html
# https://www.sublimetext.com/docs/3/scope_naming.html

#
# Adapted from: https://github.com/ViktorQvarfordt/Sublime-WolframLanguage
#

name: WolframLanguage

file_extensions:
  - m
  - wl
  - wls
  - mt
  - wlt

scope: source.wolfram

variables:
  symbolSegment: '[$[:alpha:]]+[$[:alnum:]]*'
  symbol: '(?:{{symbolSegment}}?)(?:<*"`"*>{{symbolSegment}})*'
  symbolBoundary: '[<*"`"*>$[:alnum:]]'

  #
  # This gets filled-in during build
  #
  built_in_functions: |-
    (?x)
    \b(?:System<*"`"*>)?(?:
      `builtInFunctions`
    )(?!{{symbolBoundary}})

  constants: |-
    (?x)
    \b(?:System<*"`"*>)?(?:
      `constants`
    )(?!{{symbolBoundary}})

  #
  # This gets filled-in during build
  #
  obsolete_functions: |-
    (?x)
    \b(?:System<*"`"*>)?(?:
      `obsoleteFunctions`
    )(?!{{symbolBoundary}})

  #
  # This gets filled-in during build
  #
  undocumented_functions: |-
    (?x)
    \b(?:System<*"`"*>)?(?:
      `undocumentedFunctions`
    )(?!{{symbolBoundary}})

  #
  # This gets filled-in during build
  #
  experimental_functions: |-
    (?x)
    \b(?:System<*"`"*>)?(?:
      `experimentalFunctions`
    )(?!{{symbolBoundary}})

  # YAML escapes ' characters by doubling them up
  operator_char: '!|&|''|\*|\+|,|-|\.|/|:|;|<|=|>|\?|@|\\|^|\||~'


contexts:

  main:
    - include: expressions

  expressions:
    - include: comments
    - include: escaped_characters
    - include: literals
    - include: stringifying_operators
    - include: operators
    - include: pattern_operators
    - include: symbols
    - include: groups
    #
    # Anything else is an error
    #
    - match: (?:{{operator_char}})
      scope: invalid.illegal

  comments:
    - match: \(\*
      scope: punctuation.definition.comment.wolfram
      push: comment-block

  comment-block:
    - meta_scope: comment.block.wolfram
    - match: \(\*
      scope: punctuation.definition.comment.wolfram
      push: comment-block
    - match: \*\)
      scope: punctuation.definition.comment.wolfram
      pop: true

  escaped_characters:
    #
    # linear syntax
    #
    - match: \\(?:[!%&()*+/@^_<*"`"*> ])
      scope: constant.character.escape

    #
    # Long Names
    #
    # This gets filled-in during build
    #
    - match: '\\\[(?:`longNames`)\]'
      scope: constant.character.escape
    #
    # Anything else is an error
    #
    - match: '\\\[.*\]'
      scope: invalid.illegal

    #
    # \:XXXX syntax
    #
    - match: '\\:\h\h\h\h'
      scope: constant.character.escape
    #
    # \.XX syntax
    #
    - match: '\\\.\h\h'
      scope: constant.character.escape
    #
    # \|XXXXXX syntax
    #
    - match: '\\\|\h\h\h\h\h\h'
      scope: constant.character.escape
    #
    # \XXX syntax
    #
    - match: '\\[0-7][0-7][0-7]'
      scope: constant.character.escape
    # line continuation
    - match: '\\$'
      scope: constant.character.escape punctuation.separator.continuation
    #
    # Anything else is an error
    #
    - match: \\.
      scope: invalid.illegal

  string_escaped_characters:
    - match: \\(?:[bfnrt"\\<>])
      scope: constant.character.escape
    - include: escaped_characters

  literals:
    - match: 16\^\^\h+
      scope: constant.numeric.wolfram
    - match: (?:\d+\.?|\.\d)\d*\<*"`"*>{0,2}
      scope: constant.numeric.wolfram
    - match: \"
      scope: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted.double.wolfram
        - match: \"
          scope: punctuation.definition.string.end
          pop: true
        - include: string_escaped_characters

  stringifying_operators:
    - match: (>>>)\s*("[[:alpha:]][[:alnum:]]*")
      captures:
        1: keyword.operator.PutAppend.wolfram
        2: string.quoted.double.wolfram
    - match: (>>>)\s*([[:alpha:]][[:alnum:]]*)
      captures:
        1: keyword.operator.PutAppend.wolfram
        2: string.unquoted.wolfram
    - match: (::)("[[:alpha:]][[:alnum:]]*")
      captures:
        1: keyword.operator.MessageName.wolfram
        2: string.quoted.double.wolfram
    - match: (::)([[:alpha:]][[:alnum:]]*)
      captures:
        1: keyword.operator.MessageName.wolfram
        2: string.unquoted.wolfram
    - match: (<<)\s*("[<*"`"*>[:alpha:]][<*"`"*>[:alnum:]]*")
      captures:
        1: keyword.operator.Get.wolfram
        2: string.quoted.double.wolfram
    - match: (<<)\s*([<*"`"*>[:alpha:]][<*"`"*>[:alnum:]]*)
      captures:
        1: keyword.operator.Get.wolfram
        2: string.unquoted.wolfram
    - match: (>>)\s*("[[:alpha:]][[:alnum:]]*")
      captures:
        1: keyword.operator.Put.wolfram
        2: string.quoted.double.wolfram
    - match: (>>)\s*([[:alpha:]][[:alnum:]]*)
      captures:
        1: keyword.operator.Put.wolfram
        2: string.unquoted.wolfram

  operators:
    # 3 character assignment
    - match: (?:\^:=)
      scope: keyword.operator.assignment.UpSetDelayed.wolfram
    # anything else
    - match: (?:\^:.)
      scope: invalid.illegal
    # 3 character other
    - match: (?:===)
      scope: keyword.operator.SameQ.wolfram
    # 3 character other
    - match: (?:=!=|\.\.\.|//\.|@@@|<->|//@)
      scope: keyword.operator.wolfram
    # 2 character arithmetic
    - match: (?:--|\+\+)
      scope: keyword.operator.arithmetic.wolfram
    # 2 character logical
    - match: (?:\|\||&&)
      scope: keyword.operator.logical.wolfram
    # 2 character assignment
    - match: (?::=)
      scope: keyword.operator.assignment.SetDelayed.wolfram
    - match: (?:\^=)
      scope: keyword.operator.assignment.UpSet.wolfram
    - match: (?:/=)
      scope: keyword.operator.assignment.DivideBy.wolfram
    - match: (?:\+=)
      scope: keyword.operator.assignment.AddTo.wolfram
    - match: (?:=\.)
      scope: keyword.operator.assignment.Unset.wolfram
    - match: (?:\*=)
      scope: keyword.operator.assignment.TimesBy.wolfram
    - match: (?:-=)
      scope: keyword.operator.assignment.SubtractFrom.wolfram
    - match: (?:/:)
      scope: keyword.operator.assignment.TagSet.wolfram
    # 2 character ;; specific
    - match: (?:;;$)
      scope: invalid.endofline.Span.wolfram
    - match: (?:;;)
      scope: keyword.operator.Span.wolfram
    # 2 character other
    # accomodate =!= syntax for fonts
    #- match: (?<!=)(?:!=)
    - match: (?:!=)
      scope: keyword.operator.Unequal.wolfram
    - match: (?:==)
      scope: keyword.operator.Equal.wolfram
    # could be Factorial2 or Not2, so do not treat as logical
    - match: (?:!!)
      scope: keyword.operator.BangBang.wolfram
    # - match: (?:\?\?)
    #   scope: keyword.operator.wolfram
    - match: (?:<=|>=|\.\.|:>|<>|->|/@|/;|/\.|//|/\*|@@|@\*|~~|\*\*)
      scope: keyword.operator.wolfram
    # 1 character arithmetic
    - match: (?:-|\+|/|\*)
      scope: keyword.operator.arithmetic.wolfram
    # 1 character assignment
    - match: (?:=)
      scope: keyword.operator.assignment.Set.wolfram
    # 1 character other
    # accomodate <||> syntax
    - match: (?:<)(?!\|)
      scope: keyword.operator.Less.wolfram
    # accomodate <||> syntax
    - match: (?:\|)(?!>)
      scope: keyword.operator.Alternatives.wolfram
    # could be Not or Factorial, so do not treat as logical
    - match: (?:!)
      scope: keyword.operator.Bang.wolfram
    - match: (?:;)
      scope: keyword.operator.CompoundExpression.wolfram punctuation.terminator
    - match: (?:,)
      scope: keyword.operator.Comma.wolfram punctuation.separator
    - match: ^(?:\?)
      scope: invalid.startofline.Information.wolfram
    # TODO: warn about ??
    - match: (?:\?)(?!\?)
      scope: keyword.operator.wolfram
    - match: (?:>|\^|\.|:|,|&|@|~|')
      scope: keyword.operator.wolfram
  
  symbols:
    - match: '{{built_in_functions}}'
      scope: variable.function.builtin.wolfram
    - match: '{{constants}}'
      scope: constant.language.wolfram
    - match: '{{obsolete_functions}}'
      scope: invalid.deprecated.wolfram
    - match: '{{undocumented_functions}}'
      scope: variable.function.undocumented.wolfram
    - match: '{{experimental_functions}}'
      scope: variable.function.experimental.wolfram
    - match: 'System<*"`"*>{{symbolSegment}}(?!{{symbolBoundary}})'
      scope: invalid.illegal.system.wolfram
    - match: '{{symbol}}(?!{{symbolBoundary}})'
      scope: variable.other.wolfram

  groups:
    - match: \(
      scope: punctuation.section.parens.begin.wolfram
      push:
        - meta_scope: meta.parens.wolfram
        - match: \)
          scope: punctuation.section.parens.end.wolfram
          pop: true
        - include: expressions
    - match: \[\s*\[
      scope: punctuation.section.parts.begin.wolfram
      push:
        - meta_scope: meta.parts.wolfram
        - match: \]\s*\]
          scope: punctuation.section.parts.end.wolfram
          pop: true
        - include: expressions
    - match: \[
      scope: punctuation.section.brackets.begin.wolfram
      push:
        - meta_scope: meta.brackets.wolfram
        - match: \]
          scope: punctuation.section.brackets.end.wolfram
          pop: true
        - include: expressions
    - match: \{
      scope: punctuation.section.braces.begin.wolfram
      push:
        - meta_scope: meta.braces.wolfram
        - match: \}
          scope: punctuation.section.braces.end.wolfram
          pop: true
        - include: expressions
    - match: <\|
      scope: punctuation.section.association.begin.wolfram
      push:
        - meta_scope: meta.association.wolfram
        - match: \|>
          scope: punctuation.section.association.end.wolfram
          pop: true
        - include: expressions

  pattern_operators:
    - match: (?:___)
      scope: keyword.operator.BlankNullSequence.wolfram
    - match: (?:__)
      scope: keyword.operator.BlankSequence.wolfram
    - match: (?:_\.)
      scope: keyword.operator.Optional.wolfram
    - match: (?:_)
      scope: keyword.operator.Blank.wolfram
